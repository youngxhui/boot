// Code generated by entc, DO NOT EDIT.

package ent

import (
	"boot/ent/notice"
	"boot/ent/predicate"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NoticeUpdate is the builder for updating Notice entities.
type NoticeUpdate struct {
	config
	hooks    []Hook
	mutation *NoticeMutation
}

// Where adds a new predicate for the NoticeUpdate builder.
func (nu *NoticeUpdate) Where(ps ...predicate.Notice) *NoticeUpdate {
	nu.mutation.predicates = append(nu.mutation.predicates, ps...)
	return nu
}

// SetNoticeType sets the "noticeType" field.
func (nu *NoticeUpdate) SetNoticeType(i int) *NoticeUpdate {
	nu.mutation.ResetNoticeType()
	nu.mutation.SetNoticeType(i)
	return nu
}

// AddNoticeType adds i to the "noticeType" field.
func (nu *NoticeUpdate) AddNoticeType(i int) *NoticeUpdate {
	nu.mutation.AddNoticeType(i)
	return nu
}

// SetUserId sets the "userId" field.
func (nu *NoticeUpdate) SetUserId(i int) *NoticeUpdate {
	nu.mutation.ResetUserId()
	nu.mutation.SetUserId(i)
	return nu
}

// AddUserId adds i to the "userId" field.
func (nu *NoticeUpdate) AddUserId(i int) *NoticeUpdate {
	nu.mutation.AddUserId(i)
	return nu
}

// SetContent sets the "content" field.
func (nu *NoticeUpdate) SetContent(s string) *NoticeUpdate {
	nu.mutation.SetContent(s)
	return nu
}

// Mutation returns the NoticeMutation object of the builder.
func (nu *NoticeUpdate) Mutation() *NoticeMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NoticeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	nu.defaults()
	if len(nu.hooks) == 0 {
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NoticeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NoticeUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NoticeUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NoticeUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NoticeUpdate) defaults() {
	if _, ok := nu.mutation.UpdateTime(); !ok {
		v := notice.UpdateDefaultUpdateTime()
		nu.mutation.SetUpdateTime(v)
	}
}

func (nu *NoticeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notice.Table,
			Columns: notice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: notice.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notice.FieldUpdateTime,
		})
	}
	if value, ok := nu.mutation.NoticeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notice.FieldNoticeType,
		})
	}
	if value, ok := nu.mutation.AddedNoticeType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notice.FieldNoticeType,
		})
	}
	if value, ok := nu.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notice.FieldUserId,
		})
	}
	if value, ok := nu.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notice.FieldUserId,
		})
	}
	if value, ok := nu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notice.FieldContent,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notice.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NoticeUpdateOne is the builder for updating a single Notice entity.
type NoticeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NoticeMutation
}

// SetNoticeType sets the "noticeType" field.
func (nuo *NoticeUpdateOne) SetNoticeType(i int) *NoticeUpdateOne {
	nuo.mutation.ResetNoticeType()
	nuo.mutation.SetNoticeType(i)
	return nuo
}

// AddNoticeType adds i to the "noticeType" field.
func (nuo *NoticeUpdateOne) AddNoticeType(i int) *NoticeUpdateOne {
	nuo.mutation.AddNoticeType(i)
	return nuo
}

// SetUserId sets the "userId" field.
func (nuo *NoticeUpdateOne) SetUserId(i int) *NoticeUpdateOne {
	nuo.mutation.ResetUserId()
	nuo.mutation.SetUserId(i)
	return nuo
}

// AddUserId adds i to the "userId" field.
func (nuo *NoticeUpdateOne) AddUserId(i int) *NoticeUpdateOne {
	nuo.mutation.AddUserId(i)
	return nuo
}

// SetContent sets the "content" field.
func (nuo *NoticeUpdateOne) SetContent(s string) *NoticeUpdateOne {
	nuo.mutation.SetContent(s)
	return nuo
}

// Mutation returns the NoticeMutation object of the builder.
func (nuo *NoticeUpdateOne) Mutation() *NoticeMutation {
	return nuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NoticeUpdateOne) Select(field string, fields ...string) *NoticeUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notice entity.
func (nuo *NoticeUpdateOne) Save(ctx context.Context) (*Notice, error) {
	var (
		err  error
		node *Notice
	)
	nuo.defaults()
	if len(nuo.hooks) == 0 {
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NoticeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NoticeUpdateOne) SaveX(ctx context.Context) *Notice {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NoticeUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NoticeUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NoticeUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdateTime(); !ok {
		v := notice.UpdateDefaultUpdateTime()
		nuo.mutation.SetUpdateTime(v)
	}
}

func (nuo *NoticeUpdateOne) sqlSave(ctx context.Context) (_node *Notice, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notice.Table,
			Columns: notice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: notice.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Notice.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notice.FieldID)
		for _, f := range fields {
			if !notice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notice.FieldUpdateTime,
		})
	}
	if value, ok := nuo.mutation.NoticeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notice.FieldNoticeType,
		})
	}
	if value, ok := nuo.mutation.AddedNoticeType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notice.FieldNoticeType,
		})
	}
	if value, ok := nuo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notice.FieldUserId,
		})
	}
	if value, ok := nuo.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notice.FieldUserId,
		})
	}
	if value, ok := nuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notice.FieldContent,
		})
	}
	_node = &Notice{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notice.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
