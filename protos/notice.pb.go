// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: notice.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_notice_proto protoreflect.FileDescriptor

var file_notice_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0x38, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0b,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x42, 0x0a, 0x5a, 0x08,
	0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_notice_proto_goTypes = []interface{}{
	(*Empty)(nil),  // 0: protos.Empty
	(*Result)(nil), // 1: protos.Result
}
var file_notice_proto_depIdxs = []int32{
	0, // 0: protos.Notice.ErrorWaring:input_type -> protos.Empty
	1, // 1: protos.Notice.ErrorWaring:output_type -> protos.Result
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_notice_proto_init() }
func file_notice_proto_init() {
	if File_notice_proto != nil {
		return
	}
	file_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_notice_proto_goTypes,
		DependencyIndexes: file_notice_proto_depIdxs,
	}.Build()
	File_notice_proto = out.File
	file_notice_proto_rawDesc = nil
	file_notice_proto_goTypes = nil
	file_notice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NoticeClient is the client API for Notice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoticeClient interface {
	ErrorWaring(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Notice_ErrorWaringClient, error)
}

type noticeClient struct {
	cc grpc.ClientConnInterface
}

func NewNoticeClient(cc grpc.ClientConnInterface) NoticeClient {
	return &noticeClient{cc}
}

func (c *noticeClient) ErrorWaring(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Notice_ErrorWaringClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Notice_serviceDesc.Streams[0], "/protos.Notice/ErrorWaring", opts...)
	if err != nil {
		return nil, err
	}
	x := &noticeErrorWaringClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notice_ErrorWaringClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type noticeErrorWaringClient struct {
	grpc.ClientStream
}

func (x *noticeErrorWaringClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NoticeServer is the server API for Notice service.
type NoticeServer interface {
	ErrorWaring(*Empty, Notice_ErrorWaringServer) error
}

// UnimplementedNoticeServer can be embedded to have forward compatible implementations.
type UnimplementedNoticeServer struct {
}

func (*UnimplementedNoticeServer) ErrorWaring(*Empty, Notice_ErrorWaringServer) error {
	return status.Errorf(codes.Unimplemented, "method ErrorWaring not implemented")
}

func RegisterNoticeServer(s *grpc.Server, srv NoticeServer) {
	s.RegisterService(&_Notice_serviceDesc, srv)
}

func _Notice_ErrorWaring_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NoticeServer).ErrorWaring(m, &noticeErrorWaringServer{stream})
}

type Notice_ErrorWaringServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type noticeErrorWaringServer struct {
	grpc.ServerStream
}

func (x *noticeErrorWaringServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

var _Notice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Notice",
	HandlerType: (*NoticeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ErrorWaring",
			Handler:       _Notice_ErrorWaring_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notice.proto",
}
